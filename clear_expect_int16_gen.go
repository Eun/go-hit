// +build !generate

package hit

import errortrace "github.com/Eun/go-hit/errortrace"

// ⚠️⚠️⚠️ This file was autogenerated by generators/clear/clear ⚠️⚠️⚠️ //

// IClearExpectInt16 provides methods to clear steps.
type IClearExpectInt16 interface {
	IStep
	// Between clears all matching Between steps
	Between(value ...int16) IStep
	// Equal clears all matching Equal steps
	Equal(value ...int16) IStep
	// GreaterOrEqualThan clears all matching GreaterOrEqualThan steps
	GreaterOrEqualThan(value ...int16) IStep
	// GreaterThan clears all matching GreaterThan steps
	GreaterThan(value ...int16) IStep
	// LessOrEqualThan clears all matching LessOrEqualThan steps
	LessOrEqualThan(value ...int16) IStep
	// LessThan clears all matching LessThan steps
	LessThan(value ...int16) IStep
	// NotBetween clears all matching NotBetween steps
	NotBetween(value ...int16) IStep
	// NotEqual clears all matching NotEqual steps
	NotEqual(value ...int16) IStep
	// NotOneOf clears all matching NotOneOf steps
	NotOneOf(value ...int16) IStep
	// OneOf clears all matching OneOf steps
	OneOf(value ...int16) IStep
}
type clearExpectInt16 struct {
	cp callPath
	tr *errortrace.ErrorTrace
}

func newClearExpectInt16(cp callPath) IClearExpectInt16 {
	return &clearExpectInt16{cp: cp, tr: ett.Prepare()}
}
func (v *clearExpectInt16) trace() *errortrace.ErrorTrace {
	return v.tr
}
func (*clearExpectInt16) when() StepTime {
	return cleanStep
}
func (v *clearExpectInt16) callPath() callPath {
	return v.cp
}
func (v *clearExpectInt16) exec(hit *hitImpl) error {
	if err := removeSteps(hit, v.callPath()); err != nil {
		return err
	}
	return nil
}
func (v *clearExpectInt16) Between(value ...int16) IStep {
	return removeStep(v.callPath().Push("Between", int16SliceToInterfaceSlice(value)))
}
func (v *clearExpectInt16) Equal(value ...int16) IStep {
	return removeStep(v.callPath().Push("Equal", int16SliceToInterfaceSlice(value)))
}
func (v *clearExpectInt16) GreaterOrEqualThan(value ...int16) IStep {
	return removeStep(v.callPath().Push("GreaterOrEqualThan", int16SliceToInterfaceSlice(value)))
}
func (v *clearExpectInt16) GreaterThan(value ...int16) IStep {
	return removeStep(v.callPath().Push("GreaterThan", int16SliceToInterfaceSlice(value)))
}
func (v *clearExpectInt16) LessOrEqualThan(value ...int16) IStep {
	return removeStep(v.callPath().Push("LessOrEqualThan", int16SliceToInterfaceSlice(value)))
}
func (v *clearExpectInt16) LessThan(value ...int16) IStep {
	return removeStep(v.callPath().Push("LessThan", int16SliceToInterfaceSlice(value)))
}
func (v *clearExpectInt16) NotBetween(value ...int16) IStep {
	return removeStep(v.callPath().Push("NotBetween", int16SliceToInterfaceSlice(value)))
}
func (v *clearExpectInt16) NotEqual(value ...int16) IStep {
	return removeStep(v.callPath().Push("NotEqual", int16SliceToInterfaceSlice(value)))
}
func (v *clearExpectInt16) NotOneOf(value ...int16) IStep {
	return removeStep(v.callPath().Push("NotOneOf", int16SliceToInterfaceSlice(value)))
}
func (v *clearExpectInt16) OneOf(value ...int16) IStep {
	return removeStep(v.callPath().Push("OneOf", int16SliceToInterfaceSlice(value)))
}

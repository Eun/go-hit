// +build !generate_numeric

package hit

import minitest "github.com/Eun/go-hit/internal/minitest"

// ⚠️⚠️⚠️ This file was autogenerated by generators/expect/numeric ⚠️⚠️⚠️ //

// IExpectUint64 provides assertions for the uint64 type.
type IExpectUint64 interface {
	// Equal expects the uint64 to be equal to the specified value.
	Equal(value uint64) IStep

	// NotEqual expects the uint64 to be not equal to the specified value.
	NotEqual(value ...uint64) IStep

	// OneOf expects the uint64 to be equal to one of the specified values.
	OneOf(values ...uint64) IStep

	// NotOneOf expects the uint64 to be not equal to one of the specified values.
	NotOneOf(values ...uint64) IStep

	// GreaterThan expects the uint64 to be not greater than the specified value.
	GreaterThan(value uint64) IStep

	// LessThan expects the uint64 to be less than the specified value.
	LessThan(value uint64) IStep

	// GreaterOrEqualThan expects the uint64 to be greater or equal than the specified value.
	GreaterOrEqualThan(value uint64) IStep

	// LessOrEqualThan expects the uint64 to be less or equal than the specified value.
	LessOrEqualThan(value uint64) IStep

	// Between expects the uint64 to be between the specified min and max value (inclusive, min >= uint64 >= max).
	Between(min, max uint64) IStep

	// NotBetween expects the uint64 to be not between the specified min and max value (inclusive, min >= uint64 >= max).
	NotBetween(min, max uint64) IStep
}
type expectUint64ValueCallback func(hit Hit) uint64
type expectUint64 struct {
	cp            callPath
	valueCallback expectUint64ValueCallback
}

func newExpectUint64(cp callPath, valueCallback expectUint64ValueCallback) IExpectUint64 {
	return &expectUint64{cp: cp, valueCallback: valueCallback}
}
func (v *expectUint64) Equal(value uint64) IStep {
	return &hitStep{Trace: ett.Prepare(), When: ExpectStep, CallPath: v.cp.Push("Equal", []interface{}{value}), Exec: func(hit *hitImpl) error {
		return minitest.Equal(v.valueCallback(hit), value)
	}}
}
func (v *expectUint64) NotEqual(values ...uint64) IStep {
	return &hitStep{Trace: ett.Prepare(), When: ExpectStep, CallPath: v.cp.Push("NotEqual", uint64SliceToInterfaceSlice(values)), Exec: func(hit *hitImpl) error {
		return minitest.NotEqual(v.valueCallback(hit), uint64SliceToInterfaceSlice(values)...)
	}}
}
func (v *expectUint64) OneOf(values ...uint64) IStep {
	return &hitStep{Trace: ett.Prepare(), When: ExpectStep, CallPath: v.cp.Push("OneOf", uint64SliceToInterfaceSlice(values)), Exec: func(hit *hitImpl) error {
		return minitest.OneOf(v.valueCallback(hit), uint64SliceToInterfaceSlice(values)...)
	}}
}
func (v *expectUint64) NotOneOf(values ...uint64) IStep {
	return &hitStep{Trace: ett.Prepare(), When: ExpectStep, CallPath: v.cp.Push("NotOneOf", uint64SliceToInterfaceSlice(values)), Exec: func(hit *hitImpl) error {
		return minitest.NotOneOf(v.valueCallback(hit), uint64SliceToInterfaceSlice(values)...)
	}}
}
func (v *expectUint64) GreaterThan(value uint64) IStep {
	return &hitStep{Trace: ett.Prepare(), When: ExpectStep, CallPath: v.cp.Push("GreaterThan", []interface{}{value}), Exec: func(hit *hitImpl) error {
		l := v.valueCallback(hit)
		if l <= value {
			return minitest.Errorf("expected %d to be greater than %d", l, value)
		}
		return nil
	}}
}
func (v *expectUint64) LessThan(value uint64) IStep {
	return &hitStep{Trace: ett.Prepare(), When: ExpectStep, CallPath: v.cp.Push("LessThan", []interface{}{value}), Exec: func(hit *hitImpl) error {
		l := v.valueCallback(hit)
		if l >= value {
			return minitest.Errorf("expected %d to be less than %d", l, value)
		}
		return nil
	}}
}
func (v *expectUint64) GreaterOrEqualThan(value uint64) IStep {
	return &hitStep{Trace: ett.Prepare(), When: ExpectStep, CallPath: v.cp.Push("GreaterOrEqualThan", []interface{}{value}), Exec: func(hit *hitImpl) error {
		l := v.valueCallback(hit)
		if l < value {
			return minitest.Errorf("expected %d to be greater or equal than %d", l, value)
		}
		return nil
	}}
}
func (v *expectUint64) LessOrEqualThan(value uint64) IStep {
	return &hitStep{Trace: ett.Prepare(), When: ExpectStep, CallPath: v.cp.Push("LessOrEqualThan", []interface{}{value}), Exec: func(hit *hitImpl) error {
		l := v.valueCallback(hit)
		if l > value {
			return minitest.Errorf("expected %d to be less or equal than %d", l, value)
		}
		return nil
	}}
}
func (v *expectUint64) Between(min, max uint64) IStep {
	return &hitStep{Trace: ett.Prepare(), When: ExpectStep, CallPath: v.cp.Push("Between", []interface{}{min, max}), Exec: func(hit *hitImpl) error {
		l := v.valueCallback(hit)
		if l < min || l > max {
			return minitest.Errorf("expected %d to be between %d and %d", l, min, max)
		}
		return nil
	}}
}
func (v *expectUint64) NotBetween(min, max uint64) IStep {
	return &hitStep{Trace: ett.Prepare(), When: ExpectStep, CallPath: v.cp.Push("NotBetween", []interface{}{min, max}), Exec: func(hit *hitImpl) error {
		l := v.valueCallback(hit)
		if l >= min && l <= max {
			return minitest.Errorf("expected %d not to be between %d and %d", l, min, max)
		}
		return nil
	}}
}

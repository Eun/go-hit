// +build doctest

package hit_test

import (
	"encoding/base64"
	"errors"
	"fmt"
	"testing"

	doctest "github.com/Eun/go-hit/doctest"

	"net/http"

	. "github.com/Eun/go-hit"
)

// ⚠️⚠️⚠️ This file was autogenerated by generators/readme/readme ⚠️⚠️⚠️ //
func TestReadmeCodePart0(t *testing.T) {
	doctest.RunTest(true, func() {
		MustDo(
			Get("https://httpbin.org/post"),
			Expect().Status().Equal(http.StatusMethodNotAllowed),
			Expect().Headers("Content-Type").NotEmpty(),
			Expect().Body().String().Contains("Method Not Allowed"),
		)
	})
}
func TestReadmeCodePart1(t *testing.T) {
	doctest.RunTest(true, func() {
		MustDo(
			Post("https://httpbin.org/post"),
			Send().Body().String("Hello HttpBin"),
			Expect().Status().Equal(http.StatusOK),
			Expect().Body().String().Contains("Hello HttpBin"),
		)
	})
}
func TestReadmeCodePart2(t *testing.T) {
	doctest.RunTest(true, func() {
		MustDo(
			Post("https://httpbin.org/post"),
			Send().Headers("Content-Type").Add("application/json"),
			Send().Body().JSON(map[string][]string{"Foo": []string{"Bar", "Baz"}}),
			Expect().Status().Equal(http.StatusOK),
			Expect().Body().JSON().JQ(".json.Foo[1]").Equal("Baz"),
		)
	})
}
func TestReadmeCodePart3(t *testing.T) {
	doctest.RunTest(true, func() {
		var name string
		var roles []string
		MustDo(
			Post("https://httpbin.org/post"),
			Send().Headers("Content-Type").Add("application/json"),
			Send().Body().JSON(map[string]interface{}{"Name": "Joe", "Roles": []string{"Admin", "Developer"}}),
			Expect().Status().Equal(http.StatusOK),
			Store().Response().Body().JSON().JQ(".json.Name").In(&name),
			Store().Response().Body().JSON().JQ(".json.Roles").In(&roles),
		)
		fmt.Printf("%s has %d roles\n", name, len(roles))
	})
}
func TestReadmeCodePart4(t *testing.T) {
	doctest.RunTest(true, func() {
		MustDo(
			Post("https://httpbin.org/post"),
			Debug(),
			Debug().Response().Body(),
		)
	})
}
func TestReadmeCodePart5(t *testing.T) {
	doctest.RunTest(true, func() {
		MustDo(
			Request().Method(http.MethodPost),
			Request().URL().Scheme("https"),
			Request().URL().Host("httpbin.org"),
			Request().URL().Path("/post"),
			Request().URL().Query("page").Add(1),
			Expect().Status().Equal(200),
			Send().Body().String("Hello World"),
			Expect().Body().String().Contains("Hello"),
		)
	})
}
func TestReadmeCodePart6(t *testing.T) {
	doctest.RunTest(true, func() {
		MustDo(
			Post("https://httpbin.org/post"),
			Expect().Status().Equal(200),
			Send().Body().String("Hello World"),
			Expect().Body().String().Contains("Hello"),
		)
	})
}
func TestReadmeCodePart7(t *testing.T) {
	doctest.RunTest(true, func() {
		MustDo(
			Get("https://httpbin.org/get"),
			Send().Custom(func(hit Hit) error {
				hit.Request().Body().SetStringf("Hello %s", "World")
				return nil
			}),
			Expect().Custom(func(hit Hit) error {
				if len(hit.Response().Body().MustString()) <= 0 {
					return errors.New("expected the body to be not empty")
				}
				return nil
			}),
			Custom(AfterExpectStep, func(Hit) error {
				fmt.Println("everything done")
				return nil
			}),
		)
	})
}
func TestReadmeCodePart8(t *testing.T) {
	doctest.RunTest(true, func() {
		template := CombineSteps(
			Post("https://httpbin.org/post"),
			Send().Headers("Content-Type").Add("application/json"),
			Expect().Headers("Content-Type").Equal("application/json"),
		)
		MustDo(
			template,
			Send().Body().JSON("Hello World"),
		)

		MustDo(
			template,
			Send().Body().JSON("Hello Universe"),
		)
	})
}
func TestReadmeCodePart9(t *testing.T) {
	doctest.RunTest(true, func() {
		template := CombineSteps(
			Get("https://httpbin.org/basic-auth/joe/secret"),
			Expect().Status().Equal(http.StatusOK),
		)
		MustDo(
			Description("login with correct credentials"),
			template,
			Send().Headers("Authorization").Add("Basic "+base64.StdEncoding.EncodeToString([]byte("joe:secret"))),
		)

		Test(t,
			Description("login with incorrect credentials"),
			template,
			Clear().Expect().Status(),
			Expect().Status().Equal(http.StatusUnauthorized),
			Send().Headers("Authorization").Add("Basic "+base64.StdEncoding.EncodeToString([]byte("joe:joe"))),
		)
	})
}

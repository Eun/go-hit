// +build !generate

package hit

import (
	"io"

	errortrace "github.com/Eun/go-hit/errortrace"
)

// ⚠️⚠️⚠️ This file was autogenerated by generators/clear/clear ⚠️⚠️⚠️ //

// IClearSendBody provides methods to clear steps.
type IClearSendBody interface {
	IStep
	// Bool clears all matching Bool steps
	Bool(value ...bool) IStep
	// Bytes clears all matching Bytes steps
	Bytes(value ...[]uint8) IStep
	// Float32 clears all matching Float32 steps
	Float32(value ...float32) IStep
	// Float64 clears all matching Float64 steps
	Float64(value ...float64) IStep
	// FormValues clears all matching FormValues steps
	FormValues(value ...string) IClearSendFormValues
	// Int clears all matching Int steps
	Int(value ...int) IStep
	// Int16 clears all matching Int16 steps
	Int16(value ...int16) IStep
	// Int32 clears all matching Int32 steps
	Int32(value ...int32) IStep
	// Int64 clears all matching Int64 steps
	Int64(value ...int64) IStep
	// Int8 clears all matching Int8 steps
	Int8(value ...int8) IStep
	// JSON clears all matching JSON steps
	JSON(value ...interface{}) IStep
	// Reader clears all matching Reader steps
	Reader(value ...io.Reader) IStep
	// String clears all matching String steps
	String(value ...string) IStep
	// Uint clears all matching Uint steps
	Uint(value ...uint) IStep
	// Uint16 clears all matching Uint16 steps
	Uint16(value ...uint16) IStep
	// Uint32 clears all matching Uint32 steps
	Uint32(value ...uint32) IStep
	// Uint64 clears all matching Uint64 steps
	Uint64(value ...uint64) IStep
	// Uint8 clears all matching Uint8 steps
	Uint8(value ...uint8) IStep
	// XML clears all matching XML steps
	XML(value ...interface{}) IStep
}
type clearSendBody struct {
	cp callPath
	tr *errortrace.ErrorTrace
}

func newClearSendBody(cp callPath) IClearSendBody {
	return &clearSendBody{cp: cp, tr: ett.Prepare()}
}
func (v *clearSendBody) trace() *errortrace.ErrorTrace {
	return v.tr
}
func (*clearSendBody) when() StepTime {
	return cleanStep
}
func (v *clearSendBody) callPath() callPath {
	return v.cp
}
func (v *clearSendBody) exec(hit *hitImpl) error {
	if err := removeSteps(hit, v.callPath()); err != nil {
		return err
	}
	return nil
}
func (v *clearSendBody) Bool(value ...bool) IStep {
	return removeStep(v.callPath().Push("Bool", boolSliceToInterfaceSlice(value)))
}
func (v *clearSendBody) Bytes(value ...[]uint8) IStep {
	return removeStep(v.callPath().Push("Bytes", uint8SliceSliceToInterfaceSlice(value)))
}
func (v *clearSendBody) Float32(value ...float32) IStep {
	return removeStep(v.callPath().Push("Float32", float32SliceToInterfaceSlice(value)))
}
func (v *clearSendBody) Float64(value ...float64) IStep {
	return removeStep(v.callPath().Push("Float64", float64SliceToInterfaceSlice(value)))
}
func (v *clearSendBody) FormValues(value ...string) IClearSendFormValues {
	return newClearSendFormValues(v.callPath().Push("FormValues", stringSliceToInterfaceSlice(value)))
}
func (v *clearSendBody) Int(value ...int) IStep {
	return removeStep(v.callPath().Push("Int", intSliceToInterfaceSlice(value)))
}
func (v *clearSendBody) Int16(value ...int16) IStep {
	return removeStep(v.callPath().Push("Int16", int16SliceToInterfaceSlice(value)))
}
func (v *clearSendBody) Int32(value ...int32) IStep {
	return removeStep(v.callPath().Push("Int32", int32SliceToInterfaceSlice(value)))
}
func (v *clearSendBody) Int64(value ...int64) IStep {
	return removeStep(v.callPath().Push("Int64", int64SliceToInterfaceSlice(value)))
}
func (v *clearSendBody) Int8(value ...int8) IStep {
	return removeStep(v.callPath().Push("Int8", int8SliceToInterfaceSlice(value)))
}
func (v *clearSendBody) JSON(value ...interface{}) IStep {
	return removeStep(v.callPath().Push("JSON", value))
}
func (v *clearSendBody) Reader(value ...io.Reader) IStep {
	return removeStep(v.callPath().Push("Reader", readerSliceToInterfaceSlice(value)))
}
func (v *clearSendBody) String(value ...string) IStep {
	return removeStep(v.callPath().Push("String", stringSliceToInterfaceSlice(value)))
}
func (v *clearSendBody) Uint(value ...uint) IStep {
	return removeStep(v.callPath().Push("Uint", uintSliceToInterfaceSlice(value)))
}
func (v *clearSendBody) Uint16(value ...uint16) IStep {
	return removeStep(v.callPath().Push("Uint16", uint16SliceToInterfaceSlice(value)))
}
func (v *clearSendBody) Uint32(value ...uint32) IStep {
	return removeStep(v.callPath().Push("Uint32", uint32SliceToInterfaceSlice(value)))
}
func (v *clearSendBody) Uint64(value ...uint64) IStep {
	return removeStep(v.callPath().Push("Uint64", uint64SliceToInterfaceSlice(value)))
}
func (v *clearSendBody) Uint8(value ...uint8) IStep {
	return removeStep(v.callPath().Push("Uint8", uint8SliceToInterfaceSlice(value)))
}
func (v *clearSendBody) XML(value ...interface{}) IStep {
	return removeStep(v.callPath().Push("XML", value))
}

// +build !generate

package hit

import (
	"net/url"

	errortrace "github.com/Eun/go-hit/errortrace"
)

// ⚠️⚠️⚠️ This file was autogenerated by generators/clear/clear ⚠️⚠️⚠️ //

// IClearRequestURL provides methods to clear steps.
type IClearRequestURL interface {
	IStep
	// ForceQuery clears all matching ForceQuery steps
	ForceQuery(value ...bool) IStep
	// Fragment clears all matching Fragment steps
	Fragment(value ...string) IStep
	// Host clears all matching Host steps
	Host(value ...string) IStep
	// Path clears all matching Path steps
	Path(value ...string) IStep
	// Query clears all matching Query steps
	Query(value ...string) IClearRequestURLQuery
	// RawPath clears all matching RawPath steps
	RawPath(value ...string) IStep
	// RawQuery clears all matching RawQuery steps
	RawQuery(value ...string) IStep
	// Scheme clears all matching Scheme steps
	Scheme(value ...string) IStep
	// Set clears all matching Set steps
	Set(value ...*url.URL) IStep
	// User clears all matching User steps
	User() IClearRequestURLUser
}
type clearRequestURL struct {
	cp callPath
	tr *errortrace.ErrorTrace
}

func newClearRequestURL(cp callPath) IClearRequestURL {
	return &clearRequestURL{cp: cp, tr: ett.Prepare()}
}
func (v *clearRequestURL) trace() *errortrace.ErrorTrace {
	return v.tr
}
func (*clearRequestURL) when() StepTime {
	return cleanStep
}
func (v *clearRequestURL) callPath() callPath {
	return v.cp
}
func (v *clearRequestURL) exec(hit *hitImpl) error {
	if err := removeSteps(hit, v.callPath()); err != nil {
		return err
	}
	return nil
}
func (v *clearRequestURL) ForceQuery(value ...bool) IStep {
	return removeStep(v.callPath().Push("ForceQuery", boolSliceToInterfaceSlice(value)))
}
func (v *clearRequestURL) Fragment(value ...string) IStep {
	return removeStep(v.callPath().Push("Fragment", stringSliceToInterfaceSlice(value)))
}
func (v *clearRequestURL) Host(value ...string) IStep {
	return removeStep(v.callPath().Push("Host", stringSliceToInterfaceSlice(value)))
}
func (v *clearRequestURL) Path(value ...string) IStep {
	return removeStep(v.callPath().Push("Path", stringSliceToInterfaceSlice(value)))
}
func (v *clearRequestURL) Query(value ...string) IClearRequestURLQuery {
	return newClearRequestURLQuery(v.callPath().Push("Query", stringSliceToInterfaceSlice(value)))
}
func (v *clearRequestURL) RawPath(value ...string) IStep {
	return removeStep(v.callPath().Push("RawPath", stringSliceToInterfaceSlice(value)))
}
func (v *clearRequestURL) RawQuery(value ...string) IStep {
	return removeStep(v.callPath().Push("RawQuery", stringSliceToInterfaceSlice(value)))
}
func (v *clearRequestURL) Scheme(value ...string) IStep {
	return removeStep(v.callPath().Push("Scheme", stringSliceToInterfaceSlice(value)))
}
func (v *clearRequestURL) Set(value ...*url.URL) IStep {
	return removeStep(v.callPath().Push("Set", uRLSliceToInterfaceSlice(value)))
}
func (v *clearRequestURL) User() IClearRequestURLUser {
	return newClearRequestURLUser(v.callPath().Push("User", nil))
}

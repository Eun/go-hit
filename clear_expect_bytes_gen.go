// +build !generate

package hit

import errortrace "github.com/Eun/go-hit/errortrace"

// ⚠️⚠️⚠️ This file was autogenerated by generators/clear/clear ⚠️⚠️⚠️ //

// IClearExpectBytes provides methods to clear steps.
type IClearExpectBytes interface {
	IStep
	// Contains clears all matching Contains steps
	Contains(value ...[]uint8) IStep
	// Equal clears all matching Equal steps
	Equal(value ...[]uint8) IStep
	// Len clears all matching Len steps
	Len() IClearExpectInt
	// NotContains clears all matching NotContains steps
	NotContains(value ...[]uint8) IStep
	// NotEqual clears all matching NotEqual steps
	NotEqual(value ...[]uint8) IStep
}
type clearExpectBytes struct {
	cp callPath
	tr *errortrace.ErrorTrace
}

func newClearExpectBytes(cp callPath) IClearExpectBytes {
	return &clearExpectBytes{cp: cp, tr: ett.Prepare()}
}
func (v *clearExpectBytes) trace() *errortrace.ErrorTrace {
	return v.tr
}
func (*clearExpectBytes) when() StepTime {
	return cleanStep
}
func (v *clearExpectBytes) callPath() callPath {
	return v.cp
}
func (v *clearExpectBytes) exec(hit *hitImpl) error {
	if err := removeSteps(hit, v.callPath()); err != nil {
		return err
	}
	return nil
}
func (v *clearExpectBytes) Contains(value ...[]uint8) IStep {
	return removeStep(v.callPath().Push("Contains", uint8SliceSliceToInterfaceSlice(value)))
}
func (v *clearExpectBytes) Equal(value ...[]uint8) IStep {
	return removeStep(v.callPath().Push("Equal", uint8SliceSliceToInterfaceSlice(value)))
}
func (v *clearExpectBytes) Len() IClearExpectInt {
	return newClearExpectInt(v.callPath().Push("Len", nil))
}
func (v *clearExpectBytes) NotContains(value ...[]uint8) IStep {
	return removeStep(v.callPath().Push("NotContains", uint8SliceSliceToInterfaceSlice(value)))
}
func (v *clearExpectBytes) NotEqual(value ...[]uint8) IStep {
	return removeStep(v.callPath().Push("NotEqual", uint8SliceSliceToInterfaceSlice(value)))
}
